swagger: "2.0"
info:
  version: "2019-03-04T15:29:23Z"
  title: "S3API"
basePath: "/"
schemes:
- "https"
paths:
  /:
    get:
      produces:
      - "text/plain"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Content-Length:
              type: "string"
            Timestamp:
              type: "string"
            Content-Type:
              type: "string"
        400:
          description: "400 response"
        500:
          description: "500 response"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        credentials: 
          Fn::Sub:
            - arn:aws:iam::${accId}:role/${roleName}
            - {roleName: {Ref: s3apiGatewayExecRoleName }, accId: {Ref: 'AWS::AccountId'} }
        uri: "arn:aws:apigateway:us-east-1:s3:path//"
        responses:
          4\d{2}:
            statusCode: "400"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Content-Type: "integration.response.header.Content-Type"
              method.response.header.Content-Length: "integration.response.header.Content-Length"
              method.response.header.Timestamp: "integration.response.header.Timestamp"
          5\d{2}:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"
  /{folder}:
    get:
      produces:
      - "text/plain"
      parameters:
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub:
            - arn:aws:iam::${accId}:role/${roleName}
            - {roleName: {Ref: s3apiGatewayExecRoleName }, accId: {Ref: 'AWS::AccountId'} }        
        uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.x-amz-acl: "'authenticated-read'"
          integration.request.path.bucket: "method.request.path.folder"
          integration.request.header.Content-Type: "method.request.header.Content-Type"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"
  /{folder}/{item}:
    get:
      produces:
      - "text/plain"
      parameters:
      - name: "Content-Type"
        in: "header"
        required: false
        type: "string"
      - name: "folder"
        in: "path"
        required: true
        type: "string"        
      - name: "item"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      security:
      - api_key: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::Sub:
            - arn:aws:iam::${accId}:role/${roleName}
            - {roleName: {Ref: s3apiGatewayExecRoleName }, accId: {Ref: 'AWS::AccountId'} }                  
        uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{object}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.header.x-amz-acl: "'authenticated-read'"
          integration.request.path.bucket: "method.request.path.folder"
          integration.request.path.object: "method.request.path.item"
          integration.request.header.Content-Type: "method.request.header.Content-Type"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"                   
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
